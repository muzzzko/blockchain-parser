// Code generated by MockGen. DO NOT EDIT.
// Source: ./parser_dependency.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "blockchain-parser/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// GetTxnsByAddress mocks base method.
func (m *MockTransactionRepository) GetTxnsByAddress(ctx context.Context, address string) ([]entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnsByAddress", ctx, address)
	ret0, _ := ret[0].([]entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxnsByAddress indicates an expected call of GetTxnsByAddress.
func (mr *MockTransactionRepositoryMockRecorder) GetTxnsByAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnsByAddress", reflect.TypeOf((*MockTransactionRepository)(nil).GetTxnsByAddress), ctx, address)
}

// Save mocks base method.
func (m *MockTransactionRepository) Save(arg0 context.Context, transaction entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTransactionRepositoryMockRecorder) Save(arg0, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTransactionRepository)(nil).Save), arg0, transaction)
}

// MockSubscriberRepository is a mock of SubscriberRepository interface.
type MockSubscriberRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberRepositoryMockRecorder
}

// MockSubscriberRepositoryMockRecorder is the mock recorder for MockSubscriberRepository.
type MockSubscriberRepositoryMockRecorder struct {
	mock *MockSubscriberRepository
}

// NewMockSubscriberRepository creates a new mock instance.
func NewMockSubscriberRepository(ctrl *gomock.Controller) *MockSubscriberRepository {
	mock := &MockSubscriberRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriberRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriberRepository) EXPECT() *MockSubscriberRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSubscriberRepository) Get(arg0 context.Context, address string) (entity.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, address)
	ret0, _ := ret[0].(entity.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubscriberRepositoryMockRecorder) Get(arg0, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubscriberRepository)(nil).Get), arg0, address)
}

// Save mocks base method.
func (m *MockSubscriberRepository) Save(arg0 context.Context, subscriber entity.Subscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, subscriber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSubscriberRepositoryMockRecorder) Save(arg0, subscriber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSubscriberRepository)(nil).Save), arg0, subscriber)
}

// MockBlockRepository is a mock of BlockRepository interface.
type MockBlockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlockRepositoryMockRecorder
}

// MockBlockRepositoryMockRecorder is the mock recorder for MockBlockRepository.
type MockBlockRepositoryMockRecorder struct {
	mock *MockBlockRepository
}

// NewMockBlockRepository creates a new mock instance.
func NewMockBlockRepository(ctrl *gomock.Controller) *MockBlockRepository {
	mock := &MockBlockRepository{ctrl: ctrl}
	mock.recorder = &MockBlockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockRepository) EXPECT() *MockBlockRepositoryMockRecorder {
	return m.recorder
}

// GetFailedBlock mocks base method.
func (m *MockBlockRepository) GetFailedBlock(ctx context.Context) (entity.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedBlock", ctx)
	ret0, _ := ret[0].(entity.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedBlock indicates an expected call of GetFailedBlock.
func (mr *MockBlockRepositoryMockRecorder) GetFailedBlock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedBlock", reflect.TypeOf((*MockBlockRepository)(nil).GetFailedBlock), ctx)
}

// GetLastBlock mocks base method.
func (m *MockBlockRepository) GetLastBlock(ctx context.Context) (entity.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlock", ctx)
	ret0, _ := ret[0].(entity.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlock indicates an expected call of GetLastBlock.
func (mr *MockBlockRepositoryMockRecorder) GetLastBlock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlock", reflect.TypeOf((*MockBlockRepository)(nil).GetLastBlock), ctx)
}

// GetLastParsedBlock mocks base method.
func (m *MockBlockRepository) GetLastParsedBlock(ctx context.Context) (entity.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastParsedBlock", ctx)
	ret0, _ := ret[0].(entity.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastParsedBlock indicates an expected call of GetLastParsedBlock.
func (mr *MockBlockRepositoryMockRecorder) GetLastParsedBlock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastParsedBlock", reflect.TypeOf((*MockBlockRepository)(nil).GetLastParsedBlock), ctx)
}

// Upsert mocks base method.
func (m *MockBlockRepository) Upsert(ctx context.Context, block entity.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockBlockRepositoryMockRecorder) Upsert(ctx, block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockBlockRepository)(nil).Upsert), ctx, block)
}

// MockBlockChainClient is a mock of BlockChainClient interface.
type MockBlockChainClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlockChainClientMockRecorder
}

// MockBlockChainClientMockRecorder is the mock recorder for MockBlockChainClient.
type MockBlockChainClientMockRecorder struct {
	mock *MockBlockChainClient
}

// NewMockBlockChainClient creates a new mock instance.
func NewMockBlockChainClient(ctrl *gomock.Controller) *MockBlockChainClient {
	mock := &MockBlockChainClient{ctrl: ctrl}
	mock.recorder = &MockBlockChainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockChainClient) EXPECT() *MockBlockChainClientMockRecorder {
	return m.recorder
}

// GetBlockNumber mocks base method.
func (m *MockBlockChainClient) GetBlockNumber(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockNumber", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockNumber indicates an expected call of GetBlockNumber.
func (mr *MockBlockChainClientMockRecorder) GetBlockNumber(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockNumber", reflect.TypeOf((*MockBlockChainClient)(nil).GetBlockNumber), ctx)
}

// GetTxnsByBlockByNumber mocks base method.
func (m *MockBlockChainClient) GetTxnsByBlockByNumber(ctx context.Context, blockNumber int) ([]entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnsByBlockByNumber", ctx, blockNumber)
	ret0, _ := ret[0].([]entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxnsByBlockByNumber indicates an expected call of GetTxnsByBlockByNumber.
func (mr *MockBlockChainClientMockRecorder) GetTxnsByBlockByNumber(ctx, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnsByBlockByNumber", reflect.TypeOf((*MockBlockChainClient)(nil).GetTxnsByBlockByNumber), ctx, blockNumber)
}

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockLocker) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockLockerMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLocker)(nil).Lock))
}

// Unlock mocks base method.
func (m *MockLocker) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockerMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLocker)(nil).Unlock))
}
